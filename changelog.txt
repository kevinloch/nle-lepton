4.3.7.2 Bug fixes:
        - Fixed bug in random number generatore where multiplier was initialized incorrectly
        - Literals are now explicitly created as long doubles in phase1 and phase2 functions
        - Phase 1 now reports correct solution precision in 3-term mode
        - Phase 1 solution detail now prints correct values for (C * term) fields

        Known issues:
        - Phase 1 or Phase 2 will sometimes get stuck in some exponent combinations
        - Formulas in 1-smr mode can have more than three solutions.  This mode should be deprecated or additional constraints added

4.3.7.1 Bug fixes:
        - Fixed bug where phase 1 interesting two-term test http uploads were truncated to ~325 characters
        - Updated intended version numbers in example config files to 4.3.7

4.3.7 New features:
      - Opposite sign exponents are now allowed in (1-smr) mode.
      - Added new config options 'smrfactor_gt_sm3' and 'smrfactor_lt_sm1' to restrict the reference mass / factors (if M/mr) or referenc mass * factors
        (if mr/M) to be greater than sm3 or less than sm1 in (1-smr) mode.  Only one of these restrictions can be enabled at a time.
      - Significant performance improvement in phase 1 in (1-smr) mode for when coefficients are not close to 1.
      - Improved detection for when phase 1 needs to be reset due to coefficients diverging from the solution path

      Bug fixes:
      - smrfactor_mass_user_random now filters on exact min and max limits instead of rounding to lowest exponents
      - smrfactor_mass_user_random mode now selects random values more evenly for graphs with a logaritmic axis

4.3.6 New features:
      - Added support for inverse solution mass ratios in (1-smr) mode.   M/mr and/or mr/M are enabled with config file option 'smrfactor_mass_configuration'
      - Added config file option 'exp_inv_min' to require that at least one term has an inverse epxonent at least this large (+/-)
      - Added config file option 'exp_inv_include' to require that at least one term has this specific inverse exponent (can be + or - this value, 0 = random)
      - Added config file option 'exp_pos_enable' to independently allow positive and negative exponents
      - Added config file option 'phase1_run_continuous' to independently set run-once or run continuously. Previously this automatically followed set setting
        of 'phase1_random_samples_enable'
      - Added config file options 'smrfactor_mass_user_scan', '_mass_user_random', '_mass_user_min', '_mass_user_max', and '_mass_user_step' to allow scanning
        or random selection from a range of values instead of a fixed user-defined reference mass.   This can be useful for graphing the behavior of two-term
        test over a wide range of reference masses in (1-smr) mode.  'phase2_enable=yes', and 'smrfactor_1minus_enable=no' are both unsupported when
        'smrfactor_mass_user_random' or '_scan' is configured
      - Added 'term1 signature' to output when phase 1 is solved in (1-smr) mode.  This shows whether (1-smr) is positive or negative for sm1, sm2, and sm3.
      - Added c3 to phase1 output status and results for (1-smr) mode
      - "Solving phase1..." status messages now also output for (1-smr) mode
      - Added scripts for graphing two-term test vs randomly generated reference mass in (1-smr) mode.  The scripts are in the ./scripts/scan directory.
        Sample graphs are available at http://kevinloch.com/nle-lepton/scan/

      Bug fixes:
      - Config file option 'phase1_mc_samples_limit' is now a long long integer to support > 2 billion samples
      - Removed confusing "sqrt()" label for reporting c1 and c2 when phase1 is solved in 2-term modes.  The reported c1 and c2 still represent the unsquared
        term1 and term2 coefficients while phase1 internally works with the squared terms and coefficients.  Phase 1 detail (deprecated) still shows the squared
        coefficients.
      - Fixed bug where same exponents in (1-smr) mode were not allowed when 'exp_neg_enable=no'
      - /aws/start.sh now uses the specified config file when launching program
      - Fixed bug where 'stuckprecision' was not set high enough to always cause it to be ignored in 2-term modes
      - Fixed bug with exponent sign checks in 3-term mode

4.3.5 Bug fixes:
      - Fixed critical bug where some infactors and outfactors were being improperly cast to single precision.  This was limiting precision of results in phase2
        which could cause false negative matches against experimental uncertainties, especially when solving for v or sm2.  This also caused many unnecessary
        duplicate formulas to be sent to phase 2.


4.3.4 New features:
      - (1-smr) mode now allows even exponents on term 1, both terms having the same exponent, and negative exponents
      - Two new config file options allow user control of the two-term test "reasonable range"
      - New config file option for (1-smr) mode, 'phase1_unsolvable_checkpoint' sets the maximum samples to get phase 1 progress to increment before it is
        declared unsolvable. Lower values will find unsolvable formulas faster but risk missing slow to solve formulas
      - New config file option 'phase2_enable' to disable coefficient factoring and phase 2 processing.  This can be used to speed up finding interesting
        two-term tests for later phase 2 targeted searches
      - drand48() has been completely replaced with 64-bit random number generator derived from
        https://www.pcg-random.org/posts/does-it-beat-the-minimal-standard.html.
      - Phase 2 core functions are now using long doubles (80-bit extended precision on x86) and solve down to <= 1.0E-16 precision

      Bug fixes:
      - Fixed phase 2 result range checks. The relative difference of an output is now compared to the greater of it's uncertainty or the reference value's
        uncertainty
      - Widened allowed range of variables in phase2 from 20% to 50% to prevent phase 2 from getting stuck in certain cases
      - Fixed checks in phase 2 for (mw >= mz), (mz >= mh0), (mw >= mh0) conditions
      - Added checks in selectOutputs() for outfactor_rmr masses to prevent conditions where phase 2 will not converge

4.3.3 New features:
      - Improved formatting of phase 1 status updates and removed/suppressed some unnecessary ones for (1-smr) mode
      - Tightened two-term test "reasonable" range for faster exclusion of uninteresting formulas in (1-smr) mode

      Bug fixes:
      - Widened allowed range of variables in phase 2 from 10% to 20% to prevent phase 2 from getting stuck when using large (inverse) expnents
        or low phase1_match_filter

4.3.2 New feature:
      - New unsolvable test in (1-smr) mode that checks if any progress has been made on best ordering since last unsolvable_checkpoint. This
        allows config file option 'phase1_mc_samples_limit' to revert to a safety check with a much higher value

4.3.1 New feature:
      - srcipts/grep-logs.sh now detects and ignores duplicate results

      Bug fixes:
      - Fixed critical bug where phase2 would fail to solve because nle_state->phase1_matches_count was not being reset between runs
        and phase2 was trying to solve stale formula terms from a previous run (often with the wrong exponent)
      - Removed duplicate upload of interesting two-term test finds
      - Updated titles in scripts/grep-logs.sh to reflect current program name

4.3  New features:
     - Support for reference mass ratios (rmr) outside radical
     - More options for controlling verbosity of status output
     - New configuration option nle_mixing_polarity for 2-term with (1-smr) mode.   Status updates now indicate polarity
     - Setting phase1_random_samples_enable to 'no' now also causes phase1 to be run just once instead of continuously
     - phase1 now uses a 64-bit random number generator derived from https://www.pcg-random.org/posts/does-it-beat-the-minimal-standard.html. This
       may replace drand48() completely in future releases

     Bug fixes:
     - Phase 2 valid result test now accounts for the relative uncertainty of the outputs when comparing their distance to the relative uncertainty of the
       experimental values
     - Fixed bug in srcipts/grep-logs.sh that was writing meta refresh line to wrong file
     - selectOutputs() rewritten and now checks that both the primary reference mass is floated in 2-term modes and highest uncertainty
       solution mass is also floated in (1-smr) mode
     - phase 1 has better unsolvable formula detection algorithms.  Config option 'phase1_mc_samples_limit' can now be used to control one of these

4.2  New features: 
     - Added support for (1-smr) mode. Enable by setting smrfactor_1minus_enable=yes and nle_mode=2.  Negative exponents
       are disabled in this mode, term1 must have an odd exponent (for when 1-smr is negative), and both terms will use the same smr including reference mass
     - Added support for two additional user-supplied factors for outside radical for total of three
     - Added phase1_random_samples_enable option.  When set to "no" variables are all set to center of experimental range each time phase 1 is run
     - Phase 1 core functions are now using long doubles (80-bit extended precision on x86) and solve down to <= 1.0E-16 precision
     - Symmetry score now has more checks
     - Complexity score now ignores 1's in rationals for better selection of simplest duplicate formula
     Bug Fixes:
     - Fixed several logic bugs in interesting() that were causing many factors to not be found
     - Fixed bug in verifyMatches() that was generating incorrect formula hashes and allowing duplicate formulas

4.1  - Fixed bug in selectOutputs() that would not allow user-defined mass to be used as output
     - Fixed bug in generateExponents() that affected term3 when exp_neg_enable=no
     - Fixed bug in http results upload that would filter some results even when phase2_results_always=yes
     - Updated default Higgs boson reference value to 125.35 +/- 0.15 GeV published by CMS collaboration 
         https://cds.cern.ch/record/2691211/files/HIG-19-004-pas.pdf
     - term_id is now used as key in match tables instead of exp_inv
     - Initial development support for 2-term mixed (squared) mode, where a third term is generated synthetically from two base terms.
  
4.0  - First version to use an external configuration file (nle-lepton.cfg) to set search parameters
     - See nle-lepton.cfg for complete list of supported options
     - New types nle_config_t and nle_state_t greatly simplify arguments passed between functions

3.41 - Renamed project from polylepton to nle-lepton (nle = non-linear equation) since we are not working with true polynomials and
       to avoid confusion with multi-lepton decay processes
     - Renamed 'poly' string variable to 'exponents', changed other occurrances of poly or polyform to NLE, exponents or other appropriate words
     - Split monolithic source file into multiple files and added a basic Makefile
     - Renamed ALWAYSSHOWRESULTS compile time option to ALWAYS_SHOW_RESULTS

3.40 - Added ALWAYSSHOWRESULTS compile time option
     - Added consistency check requiring all three terms to have the same type of n-ball volume or n-sphere surface area factors
     - Now displays formula key in results output (L-M+R-1=0) along with term label (L,M,R) for each term formula
     - Increased support range of phase 1 filter to [3..6]
     - Support in phase 2 for solving for any variable including me and alpha
     - tmpmatchcomplexity is now calculated correctly in verifyMatches()

3.39 - Expanded supported dimensions from 12 to 26
     - Removed a^9 factor from M/mp mass ratio (this arbitrary scaling factor is not needed with higher dimensions)
     - Removed sqrt(2) factor from M/v mass ratio, as sqrt(2) inside radical is already included in initMultiplierArray()
     - Significant changes to phase 1  and phase 2 algorithms to be faster and more reliable
     - Phase 1 now uses electron mass as a temporary reference mass, actual reference masses are now introduced in cscanner()
     - Phase 1 and 2 now always solves all polyforms. Low dimension and mixed dimension polyforms are solved quickly.  Polyforms
       with sequential dimensions and especially higher sequential dimensions can take a long time to solve (over an hour in some cases).
     - Renamed project from 'lepton' to 'polylepton'

3.38 - Minor changes to phase 1 algorithm solvePolyForCoefficients() improves the solving difficult polyforms (like P+10+11+12)
     - Phase 2 solvePolyforMasses() now uses long double instead of double floating point
     - Phase 2 samplelimit increased (allows more phase 2's to be solved but slows the ones that fail to solve)
     - Compile time option IGNORE_SMALL_UNCERTAINTIES fixes alpha_em and electron mass to exact values for up to 4x phase 2 speedup
     - Version variable is now char[20] instead of float
     - Phase 1 output now part of "status" output instead of "search"
     - Cosmetic changes to some debug output

3.37 - first GitHub release
